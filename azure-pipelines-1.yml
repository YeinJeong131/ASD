# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '21'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'

- task: CmdLine@2
  displayName: Gradle clean build
  inputs:
    script: |
      gradlew.bat clean build --no-daemon

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**\build\test-results\test\TEST-*.xml'
    failTaskOnFailedTests: true


# steps:
# - task: Gradle@3
#   inputs:
#     gradleWrapperFile: 'gradlew'  # Path to your Gradle wrapper
#     tasks: 'test'  # Replace with the tasks you want to run
#     options: >-
#       --no-daemon
#       -Dorg.gradle.jvmargs="-Xmx1024m -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8"
#     publishJUnitResults: true
#     testResultsFiles:  '**/build/test-results/test/TEST-*.xml'  # Updated pattern for test result files
#     javaHomeOption: 'JDKVersion'
#     jdkVersionOption: '1.8'  # Replace with your JDK version
#     jdkArchitectureOption: 'x64'
